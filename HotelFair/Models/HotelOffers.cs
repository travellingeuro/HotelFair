using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HotelFair.Models;
//
//    var hotelOffers = HotelOffers.FromJson(jsonString);

namespace HotelFair.Models
{


    public partial class HotelOffers
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public List<Datum> Data { get; set; }

        [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        [JsonProperty("dictionaries", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionaries Dictionaries { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("hotel", NullValueHandling = NullValueHandling.Ignore)]
        public Hotel Hotel { get; set; }

        [JsonProperty("available", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Available { get; set; }

        [JsonProperty("offers", NullValueHandling = NullValueHandling.Ignore)]
        public List<Offer> Offers { get; set; }

        [JsonProperty("self", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Self { get; set; }
    }

    public partial class Hotel
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("hotelId", NullValueHandling = NullValueHandling.Ignore)]
        public string HotelId { get; set; }

        [JsonProperty("chainCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ChainCode { get; set; }

        [JsonProperty("dupeId", NullValueHandling = NullValueHandling.Ignore)]        
        public string DupeId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("cityCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CityCode { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("hotelDistance", NullValueHandling = NullValueHandling.Ignore)]
        public HotelDistance HotelDistance { get; set; }

        [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Description Description { get; set; }

        [JsonProperty("amenities", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Amenities { get; set; }

        [JsonProperty("media", NullValueHandling = NullValueHandling.Ignore)]
        public List<Media> Media { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("lines", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Lines { get; set; }

        [JsonProperty("postalCode", NullValueHandling = NullValueHandling.Ignore)]
        public string PostalCode { get; set; }

        [JsonProperty("cityName", NullValueHandling = NullValueHandling.Ignore)]
        public string CityName { get; set; }

        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("lang", NullValueHandling = NullValueHandling.Ignore)]
        public string Lang { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public partial class HotelDistance
    {
        [JsonProperty("distance", NullValueHandling = NullValueHandling.Ignore)]
        public double? Distance { get; set; }

        [JsonProperty("distanceUnit", NullValueHandling = NullValueHandling.Ignore)]
        public string DistanceUnit { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("uri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Uri { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }
    }

    public partial class Offer
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("checkInDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CheckInDate { get; set; }

        [JsonProperty("checkOutDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? CheckOutDate { get; set; }

        [JsonProperty("rateCode", NullValueHandling = NullValueHandling.Ignore)]
        public string RateCode { get; set; }

        [JsonProperty("commission", NullValueHandling = NullValueHandling.Ignore)]
        public Commission Commission { get; set; }

        [JsonProperty("room", NullValueHandling = NullValueHandling.Ignore)]
        public Room Room { get; set; }

        [JsonProperty("guests", NullValueHandling = NullValueHandling.Ignore)]
        public Guests Guests { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public Price Price { get; set; }

        [JsonProperty("policies", NullValueHandling = NullValueHandling.Ignore)]
        public Policies Policies { get; set; }
    }

    public partial class Commission
    {
        [JsonProperty("percentage", NullValueHandling = NullValueHandling.Ignore)]
        public string Percentage { get; set; }
    }

    public partial class Guests
    {
        [JsonProperty("adults", NullValueHandling = NullValueHandling.Ignore)]
        public long? Adults { get; set; }
    }

    public partial class Policies
    {
        [JsonProperty("guarantee", NullValueHandling = NullValueHandling.Ignore)]
        public Guarantee Guarantee { get; set; }

        [JsonProperty("paymentType", NullValueHandling = NullValueHandling.Ignore)]
        public string PaymentType { get; set; }

        [JsonProperty("cancellation", NullValueHandling = NullValueHandling.Ignore)]
        public Cancellation Cancellation { get; set; }
    }

    public partial class Cancellation
    {
        [JsonProperty("numberOfNights", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfNights { get; set; }

        [JsonProperty("deadline", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Deadline { get; set; }
    }

    public partial class Guarantee
    {
        [JsonProperty("acceptedPayments", NullValueHandling = NullValueHandling.Ignore)]
        public AcceptedPayments AcceptedPayments { get; set; }
    }

    public partial class AcceptedPayments
    {
        [JsonProperty("creditCards", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CreditCards { get; set; }

        [JsonProperty("methods", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Methods { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("currency", NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public string Total { get; set; }

        [JsonProperty("variations", NullValueHandling = NullValueHandling.Ignore)]
        public Variations Variations { get; set; }
    }

    public partial class Variations
    {
        [JsonProperty("average", NullValueHandling = NullValueHandling.Ignore)]
        public Average Average { get; set; }

        [JsonProperty("changes", NullValueHandling = NullValueHandling.Ignore)]
        public List<Change> Changes { get; set; }
    }

    public partial class Average
    {
        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public string Total { get; set; }
    }

    public partial class Change
    {
        [JsonProperty("startDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? StartDate { get; set; }

        [JsonProperty("endDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? EndDate { get; set; }

        [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
        public string Total { get; set; }
    }

    public partial class Room
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("typeEstimated", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEstimated TypeEstimated { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Description Description { get; set; }
    }

    public partial class TypeEstimated
    {
        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }
    }

    public partial class Dictionaries
    {
        [JsonProperty("currencyConversionLookupRates", NullValueHandling = NullValueHandling.Ignore)]
        public CurrencyConversionLookupRates CurrencyConversionLookupRates { get; set; }
    }

    public partial class CurrencyConversionLookupRates
    {
        [JsonProperty("EUR", NullValueHandling = NullValueHandling.Ignore)]
        public Eur Eur { get; set; }
    }

    public partial class Eur
    {
        [JsonProperty("rate", NullValueHandling = NullValueHandling.Ignore)]
        public string Rate { get; set; }

        [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
        public string Target { get; set; }

        [JsonProperty("targetDecimalPlaces", NullValueHandling = NullValueHandling.Ignore)]
        public long? TargetDecimalPlaces { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
        public Links Links { get; set; }
    }

    public partial class Links
    {
        [JsonProperty("next", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Next { get; set; }
    }

    public partial class HotelOffers
    {
        public static HotelOffers FromJson(string json) => JsonConvert.DeserializeObject<HotelOffers>(json, HotelFair.Models.HotelOffersConverter.Settings);
    }

    public static class HotelOffersSerialize
    {
        public static string ToJson(this HotelOffers self) => JsonConvert.SerializeObject(self, HotelFair.Models.HotelOffersConverter.Settings);
    }

    internal static class HotelOffersConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
