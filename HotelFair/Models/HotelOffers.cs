using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HotelFair.Models;
//
//    var hotelOffers = HotelOffers.FromJson(jsonString);

namespace HotelFair.Models
{


    public partial class HotelOffers
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("dictionaries")]
        public Dictionaries Dictionaries { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("hotel")]
        public Hotel Hotel { get; set; }

        [JsonProperty("available")]
        public bool Available { get; set; }

        [JsonProperty("offers")]
        public List<Offer> Offers { get; set; }

        [JsonProperty("self")]
        public Uri Self { get; set; }
    }

    public partial class Hotel
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("hotelId")]
        public string HotelId { get; set; }

        [JsonProperty("chainCode")]
        public string ChainCode { get; set; }

        [JsonProperty("dupeId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DupeId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("rating")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Rating { get; set; }

        [JsonProperty("cityCode")]
        public string CityCode { get; set; }

        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }

        [JsonProperty("hotelDistance")]
        public HotelDistance HotelDistance { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("contact")]
        public Contact Contact { get; set; }

        [JsonProperty("description")]
        public Description Description { get; set; }

        [JsonProperty("amenities")]
        public List<string> Amenities { get; set; }

        [JsonProperty("media")]
        public List<Media> Media { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("lines")]
        public List<string> Lines { get; set; }

        [JsonProperty("postalCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("cityName")]
        public string CityName { get; set; }

        [JsonProperty("countryCode")]
        public string CountryCode { get; set; }
    }

    public partial class Contact
    {
        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("fax")]
        public string Fax { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("lang")]
        public string Lang { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class HotelDistance
    {
        [JsonProperty("distance")]
        public double Distance { get; set; }

        [JsonProperty("distanceUnit")]
        public string DistanceUnit { get; set; }
    }

    public partial class Media
    {
        [JsonProperty("uri")]
        public Uri Uri { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }
    }

    public partial class Offer
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("roomQuantity")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RoomQuantity { get; set; }

        [JsonProperty("checkInDate")]
        public DateTimeOffset CheckInDate { get; set; }

        [JsonProperty("checkOutDate")]
        public DateTimeOffset CheckOutDate { get; set; }

        [JsonProperty("rateCode")]
        public string RateCode { get; set; }

        [JsonProperty("rateFamilyEstimated")]
        public RateFamilyEstimated RateFamilyEstimated { get; set; }

        [JsonProperty("boardType", NullValueHandling = NullValueHandling.Ignore)]
        public string BoardType { get; set; }

        [JsonProperty("room")]
        public Room Room { get; set; }

        [JsonProperty("guests")]
        public Guests Guests { get; set; }

        [JsonProperty("price")]
        public Price Price { get; set; }

        [JsonProperty("policies")]
        public Policies Policies { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public string Category { get; set; }

        [JsonProperty("commission", NullValueHandling = NullValueHandling.Ignore)]
        public Commission Commission { get; set; }
    }

    public partial class Commission
    {
        [JsonProperty("amount")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Amount { get; set; }

        [JsonProperty("percentage")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Percentage { get; set; }
    }

    public partial class Guests
    {
        [JsonProperty("adults")]
        public long Adults { get; set; }
    }

    public partial class Policies
    {
        [JsonProperty("guarantee")]
        public Guarantee Guarantee { get; set; }

        [JsonProperty("paymentType")]
        public string PaymentType { get; set; }

        [JsonProperty("cancellation")]
        public Cancellation Cancellation { get; set; }
    }

    public partial class Cancellation
    {
        [JsonProperty("numberOfNights", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfNights { get; set; }

        [JsonProperty("deadline")]
        public DateTimeOffset Deadline { get; set; }
    }

    public partial class Guarantee
    {
        [JsonProperty("acceptedPayments")]
        public AcceptedPayments AcceptedPayments { get; set; }
    }

    public partial class AcceptedPayments
    {
        [JsonProperty("creditCards")]
        public List<string> CreditCards { get; set; }

        [JsonProperty("methods")]
        public List<string> Methods { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("base", NullValueHandling = NullValueHandling.Ignore)]
        public string Base { get; set; }

        [JsonProperty("total")]
        public string Total { get; set; }

        [JsonProperty("taxes")]
        public List<Tax> Taxes { get; set; }

        [JsonProperty("variations")]
        public Variations Variations { get; set; }
    }

    public partial class Tax
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("pricingFrequency")]
        public string PricingFrequency { get; set; }

        [JsonProperty("pricingMode")]
        public string PricingMode { get; set; }

        [JsonProperty("percentage", NullValueHandling = NullValueHandling.Ignore)]
        public long? Percentage { get; set; }

        [JsonProperty("included")]
        public bool Included { get; set; }

        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public string Amount { get; set; }
    }

    public partial class Variations
    {
        [JsonProperty("average")]
        public Average Average { get; set; }

        [JsonProperty("changes")]
        public List<Change> Changes { get; set; }
    }

    public partial class Average
    {
        [JsonProperty("base")]
        public string Base { get; set; }
    }

    public partial class Change
    {
        [JsonProperty("startDate")]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("endDate")]
        public DateTimeOffset EndDate { get; set; }

        [JsonProperty("base")]
        public string Base { get; set; }
    }

    public partial class RateFamilyEstimated
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Room
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("typeEstimated")]
        public TypeEstimated TypeEstimated { get; set; }

        [JsonProperty("description")]
        public Description Description { get; set; }
    }

    public partial class TypeEstimated
    {
        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("beds")]
        public long Beds { get; set; }

        [JsonProperty("bedType")]
        public string BedType { get; set; }
    }

    public partial class Dictionaries
    {
        [JsonProperty("currencyConversionLookupRates")]
        public CurrencyConversionLookupRates CurrencyConversionLookupRates { get; set; }
    }

    public partial class CurrencyConversionLookupRates
    {
        [JsonProperty("EUR")]
        public Eur Eur { get; set; }
    }

    public partial class Eur
    {
        [JsonProperty("rate")]
        public string Rate { get; set; }

        [JsonProperty("target")]
        public string Target { get; set; }

        [JsonProperty("targetDecimalPlaces")]
        public long TargetDecimalPlaces { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("links")]
        public Links Links { get; set; }
    }

    public partial class Links
    {
        [JsonProperty("next")]
        public Uri Next { get; set; }
    }



    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
